# -*- coding: utf-8 -*-
"""The_Evolution_of_Genes_in_Viruses_and_Bacteria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12M_Vehvj3SPmht_FWhDRGwTfpgu4h8-x
"""

!apt-get update
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
!tar xf spark-3.1.1-bin-hadoop3.2.tgz
!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop3.2"
import findspark
findspark.init()

from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[1]").appName("RDD").getOrCreate()
spark

df = spark.read.csv("/content/NCBI_Escherichia_coli_genomes.csv", inferSchema = True, header = True)
df.show(5, truncate = False)

print(df.count(), len(df.columns))

df.printSchema()

df.columns

print(df['Organism Groups'])
print("*"*20)
df.select(df['Organism Groups']).show(truncate=False)

# 3rd method
# Column name is case insensitive here
from pyspark.sql.functions import col
df.select(col('Organism Groups')).show(truncate=False)

print(df.Strain, df.BioSample)
print("*"*40)
df.select(df.Strain, df.BioSample).show(truncate=False)

print(df['Strain'],df['BioSample'])
print("*"*40)
df.select(df['Strain'],df['BioSample']).show(truncate=False)

from pyspark.sql.functions import col
df.select(col('Strain'),col('BioSample')).show(truncate=False)

from pyspark.sql.functions import lit
df = df.withColumn('first_column',lit(1))

df.show(5,truncate=False)

df = df.withColumn('second_column', lit(2)) \
      .withColumn('third_column', lit('Third Column'))
df.show(5,truncate=False)

from pyspark.sql.functions import concat
df = df.withColumn('#Organism Name_GC% ', concat(col("#Organism Name"), lit(" "), col("GC%")))

df.show(5,truncate=False)

df = df.withColumnRenamed('first_column', 'new_column_one') \
      .withColumnRenamed('second_column', 'new_column_two') \
      .withColumnRenamed('third_column', 'new_column_three')
df.show(truncate=False)

df = df.drop('new_column_one')
df.show(5,truncate=False)


df = df.drop('new_column_two') \
      .drop('new_column_three')
df.show(5,truncate=False)

total_count = df.count()
print("TOTAL RECORD COUNT: " + str(total_count))
europe_filtered_count = df.filter(col('Replicons')=='DNA').count()
print("A replicon is the entire region of DNA that COUNT: " + str(europe_filtered_count))
df.filter(col('Replicons')=='DNA').show(truncate=False)

df.show(5, truncate = False)